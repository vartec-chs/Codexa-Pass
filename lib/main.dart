import 'dart:async';
import 'dart:io';

// –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫ v2
import 'package:codexa_pass/core/error_v2/error_system_v2.dart';

import 'package:codexa_pass/core/logging/logging.dart';
import 'package:codexa_pass/generated/l10n.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  await _initializeLogging();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—à–∏–±–æ–∫ v2
  await _initializeErrorSystemV2();

  runApp(ProviderScope(observers: [LogInterceptor()], child: MyApp()));
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2
Future<void> _initializeErrorSystemV2() async {
  try {
    // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    final errorHandler = ErrorHandlerV2(
      logger: CustomErrorLoggerV2(),
      analytics: CustomErrorAnalyticsV2(),
      notification: CustomErrorNotificationV2(),
      recoveryHandlers: [AuthRecoveryHandlerV2(), NetworkRecoveryHandlerV2()],
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    setGlobalErrorHandler(errorHandler);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –æ—à–∏–±–æ–∫
    setGlobalLocalizer(DefaultErrorLocalizerV2());

    AppLogger.instance.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫ v2 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (e, stackTrace) {
    AppLogger.instance.error(
      '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2',
      e,
      stackTrace,
    );
  }
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2
class CustomErrorLoggerV2 implements ErrorLoggerV2 {
  @override
  Future<void> logError(AppErrorV2 error) async {
    AppLogger.instance.error(
      'ErrorV2: ${error.localizedMessage}',
      error.originalError,
      error.stackTrace,
    );
  }

  @override
  Future<void> logInfo(String message, {Map<String, Object?>? context}) async {
    AppLogger.instance.info('ErrorV2 Info: $message');
  }

  @override
  Future<void> logWarning(
    String message, {
    Map<String, Object?>? context,
  }) async {
    AppLogger.instance.warning('ErrorV2 Warning: $message');
  }
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2
class CustomErrorAnalyticsV2 implements ErrorAnalyticsV2 {
  @override
  Future<void> trackError(
    AppErrorV2 error,
    ErrorAnalyticsData analyticsData,
  ) async {
    AppLogger.instance.info('Analytics: Error tracked - ${error.id}');
  }

  @override
  Future<void> trackRecovery(AppErrorV2 error, bool successful) async {
    AppLogger.instance.info(
      'Analytics: Recovery ${successful ? 'successful' : 'failed'} for ${error.id}',
    );
  }

  @override
  Future<void> trackRetry(AppErrorV2 error, int attemptNumber) async {
    AppLogger.instance.info(
      'Analytics: Retry attempt $attemptNumber for ${error.id}',
    );
  }
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2
class CustomErrorNotificationV2 implements ErrorNotificationV2 {
  @override
  Future<void> showError(AppErrorV2 error) async {
    AppLogger.instance.info(
      'Notification: Showing error - ${error.localizedMessage}',
    );
  }

  @override
  Future<void> showRecoverySuccess(AppErrorV2 error) async {
    AppLogger.instance.info(
      'Notification: Recovery successful for ${error.id}',
    );
  }

  @override
  Future<void> showRecoveryFailure(AppErrorV2 error) async {
    AppLogger.instance.info('Notification: Recovery failed for ${error.id}');
  }
}

Future<void> _initializeLogging() async {
  FlutterError.onError = (details) {
    AppLogger.instance.fatal('Flutter Error', details.exception, details.stack);
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç –¥–ª—è Flutter –æ—à–∏–±–æ–∫
    LogUtils.reportFlutterCrash(
      'Flutter Framework Error',
      details.exception,
      details.stack ?? StackTrace.current,
      additionalInfo: {
        'library': details.library,
        'context': details.context?.toString(),
        'informationCollector': details.informationCollector?.toString(),
      },
    );
  };

  PlatformDispatcher.instance.onError = (error, stack) {
    AppLogger.instance.fatal('Dart Error', error, stack);
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç –¥–ª—è Dart –æ—à–∏–±–æ–∫
    LogUtils.reportDartCrash(
      'Dart Runtime Error',
      error,
      stack,
      additionalInfo: {
        'isolate': 'main',
        'errorType': error.runtimeType.toString(),
      },
    );
    return true;
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  try {
    // –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LoggerInitializer.initializeQuick();

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –∏ –∂–¥–µ–º –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    final logger = AppLogger.instance;
    await logger.waitForInitialization();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await LogUtils.initializeSystemInfo();

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await LogUtils.logSessionStart();

    AppLogger.instance.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (e, stackTrace) {
    // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    AppLogger.instance.error(
      '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
      e,
      stackTrace,
    );
    LogUtils.logAppInfo(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
    AppLogger.instance.info('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
  _testLogFileCreation();
}

void _testLogFileCreation() async {
  final logger = AppLogger.instance;

  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  await Future.delayed(Duration(seconds: 2));

  if (kDebugMode) {
    print('=== TEST LOG FILE CREATION ===');
    print('File logging ready: ${logger.isFileLoggingReady}');

    final logDir = await logger.getLogDirectory();
    print('Log directory: $logDir');

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.debug('üîç –¢–µ—Å—Ç–æ–≤–æ–µ debug —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.info('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ info —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.warning('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ warning —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.error('‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ error —Å–æ–æ–±—â–µ–Ω–∏–µ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    Timer(Duration(seconds: 3), () async {
      final logFiles = await logger.getLogFiles();
      print('Found ${logFiles.length} log files:');
      for (final file in logFiles) {
        if (await file.exists()) {
          final size = await file.length();
          print('  ${file.path} ($size bytes)');
        }
      }
    });
  }
}

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return MaterialApp(
      // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
      localizationsDelegates: const [
        S.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: S.delegate.supportedLocales,

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      navigatorObservers: [LogNavigatorObserver()],

      home: Builder(
        builder: (context) {
          // –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
          // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
          WidgetsBinding.instance.addPostFrameCallback((_) {
            LoggerInitializer.initializeComplete(context: context)
                .then((_) {
                  AppLogger.instance.info(
                    'üéØ –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                  );
                  LogUtils.logEnvironmentInfo();
                })
                .catchError((e) {
                  AppLogger.instance.error(
                    '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞',
                    e,
                  );
                  // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                  LoggerInitializer.initializeWithContext(context);
                });
          });

          return const MyHomePage(title: 'Flutter Demo Home Page');
        },
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    // –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ main()
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ MyApp
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ MyApp —Å –ø–æ—Å—Ç—Ñ—Ä–µ–π–º–æ–≤—ã–º –∫–æ–ª–±—ç–∫–æ–º
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–∫—É
    LogUtils.logUserAction('–û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            FutureBuilder<String?>(
              future: AppLogger.instance.getLogDirectory(),
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Text('–õ–æ–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${snapshot.data}');
                } else {
                  return Text('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤...');
                }
              },
            ),
            SizedBox(height: 16),
            Text('–õ–æ–≥–≥–µ—Ä –≥–æ—Ç–æ–≤: ${AppLogger.instance.isFileLoggingReady}'),
            SizedBox(height: 16),
            FutureBuilder<List<File>>(
              future: AppLogger.instance.getLogFiles(),
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Text('–§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: ${snapshot.data!.length}');
                } else {
                  return Text('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤...');
                }
              },
            ),
            SizedBox(height: 32),
            ElevatedButton(
              onPressed: () {
                _testLogging();
              },
              child: const Text('–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () async {
                // –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º LogUtils.logAppInfo
                AppLogger.instance.info(
                  '=== –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç LogUtils.logExtendedAppInfo ===',
                );
                LogUtils.logExtendedAppInfo();
                AppLogger.instance.info('=== –ö–æ–Ω–µ—Ü –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ===');

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('LogUtils.logAppInfo –≤—ã–ø–æ–ª–Ω–µ–Ω!')),
                );
              },
              child: const Text('–¢–µ—Å—Ç LogUtils.logAppInfo'),
            ),
            SizedBox(height: 16),
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (context) => const ErrorSystemV2TestPage(),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.purple,
                foregroundColor: Colors.white,
              ),
              child: const Text('–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2'),
            ),

            const SizedBox(height: 16),

            const SizedBox(height: 16),
            // —Ç–µ—Å—Ç –æ—à–∏–±–æ–∫ _testNonCriticalError and _testCriticalError
            ElevatedButton(
              onPressed: _testNonCriticalError,
              child: const Text('–¢–µ—Å—Ç: –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'),
            ),
            ElevatedButton(
              onPressed: _testCriticalError,
              child: const Text('–¢–µ—Å—Ç: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'),
            ),
          ],
        ),
      ),
    );
  }

  void _testLogging() {
    // –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    AppLogger.instance.debug('–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Debug message');
    AppLogger.instance.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Info message');
    AppLogger.instance.warning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ / Warning message');
    AppLogger.instance.error('–û—à–∏–±–∫–∞ / Error message');

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    _testSystemMessages();
  }

  void _testSystemMessages() async {
    try {
      // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      await AppLogger.instance.getLogFiles();
      await AppLogger.instance.clearAllLogs();
    } catch (e) {
      AppLogger.instance.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
        e,
      );
    }
  }

  /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É (SnackBar)
  void _testNonCriticalError() async {
    final error = AuthenticationErrorV2(
      errorType: AuthenticationErrorType.invalidCredentials,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
      username: 'test@example.com',
    );

    await ErrorDisplayV2.show(
      context,
      error,
      config: const ErrorDisplayConfigV2(
        type: ErrorDisplayType.snackbar,
        showSolution: true,
        showRetryButton: true,
      ),
      onRetry: () {
        AppLogger.instance.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É');
      },
    );
  }

  /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É (–¥–∏–∞–ª–æ–≥)
  void _testCriticalError() async {
    final error = EncryptionErrorV2(
      errorType: EncryptionErrorType.decryptionFailed,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
      algorithm: 'AES-256-GCM',
      technicalDetails: 'javax.crypto.BadPaddingException: Invalid padding',
    );

    await ErrorDisplayV2.show(
      context,
      error,
      config: ErrorDisplayConfigV2.critical(),
      onRetry: () {
        AppLogger.instance.info('–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
      },
      onReport: () {
        AppLogger.instance.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ...');
      },
    );
  }
}

/// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
class SimpleErrorTestPage extends StatelessWidget {
  const SimpleErrorTestPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ (—Å—Ç–∞—Ä–∞—è)')),
      body: const Center(
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                '–°–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 16),
              Text(
                '–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n\n'
                '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–æ—Ç—Ä–∏—Ç–µ:\n'
                '‚Ä¢ lib/core/error/test_widget.dart\n'
                '‚Ä¢ lib/core/error/examples/error_examples.dart\n'
                '‚Ä¢ lib/core/error/QUICK_START.md',
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2
class ErrorSystemV2TestPage extends StatefulWidget {
  const ErrorSystemV2TestPage({super.key});

  @override
  State<ErrorSystemV2TestPage> createState() => _ErrorSystemV2TestPageState();
}

class _ErrorSystemV2TestPageState extends State<ErrorSystemV2TestPage> {
  String _lastResultMessage = '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å';
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ v2'),
        backgroundColor: Colors.purple[100],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '–°–∏—Å—Ç–µ–º–∞ –æ—à–∏–±–æ–∫ v2 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è',
                      style: Theme.of(context).textTheme.headlineSmall
                          ?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: Colors.purple[700],
                          ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n'
                      '‚Ä¢ Result<T> –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n'
                      '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å retry –ª–æ–≥–∏–∫–æ–π\n'
                      '‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é\n'
                      '‚Ä¢ –ì–∏–±–∫–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n'
                      '‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π',
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // –°–µ–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),

                    Wrap(
                      spacing: 8,
                      runSpacing: 8,
                      children: [
                        _buildTestButton(
                          '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n(SnackBar)',
                          Colors.blue,
                          () => _testAuthenticationError(),
                        ),
                        _buildTestButton(
                          '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n(Dialog)',
                          Colors.red,
                          () => _testEncryptionError(),
                        ),
                        _buildTestButton(
                          '–°–µ—Ç—å\n(Banner)',
                          Colors.orange,
                          () => _testNetworkError(),
                        ),
                        _buildTestButton(
                          '–í–∞–ª–∏–¥–∞—Ü–∏—è\n(Inline)',
                          Colors.green,
                          () => _testValidationError(),
                        ),
                        _buildTestButton(
                          '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n(Fullscreen)',
                          Colors.brown,
                          () => _testDatabaseError(),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // –°–µ–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Result<T>
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Result<T>',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),

                    Row(
                      children: [
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: _isLoading
                                ? null
                                : () => _testSuccessfulOperation(),
                            icon: const Icon(Icons.check_circle),
                            label: const Text('–£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.green[100],
                              foregroundColor: Colors.green[700],
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: _isLoading
                                ? null
                                : () => _testFailedOperation(),
                            icon: const Icon(Icons.error),
                            label: const Text('–û–ø–µ—Ä–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.red[100],
                              foregroundColor: Colors.red[700],
                            ),
                          ),
                        ),
                      ],
                    ),

                    const SizedBox(height: 8),

                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: _isLoading
                            ? null
                            : () => _testRetryOperation(),
                        icon: const Icon(Icons.refresh),
                        label: const Text('–û–ø–µ—Ä–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.purple[100],
                          foregroundColor: Colors.purple[700],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            Card(
              color: Colors.grey.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info_outline, color: Colors.blue[600]),
                        const SizedBox(width: 8),
                        Text(
                          '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏',
                          style: Theme.of(context).textTheme.titleSmall
                              ?.copyWith(fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    if (_isLoading)
                      const Row(
                        children: [
                          SizedBox(
                            width: 16,
                            height: 16,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          ),
                          SizedBox(width: 8),
                          Text('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...'),
                        ],
                      )
                    else
                      Text(
                        _lastResultMessage,
                        style: const TextStyle(fontFamily: 'monospace'),
                      ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    FutureBuilder<Map<String, Object>>(
                      future: _getErrorHandlerStats(),
                      builder: (context, snapshot) {
                        if (snapshot.hasData) {
                          final stats = snapshot.data!;
                          return Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                '–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –æ—Ç—Å–ª–µ–∂–µ–Ω–æ: ${stats['totalErrorsTracked'] ?? 0}',
                              ),
                              Text(
                                '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞: ${stats['activeRetryAttempts'] ?? 0}',
                              ),
                              Text(
                                '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${stats['recoveryHandlersCount'] ?? 0}',
                              ),
                            ],
                          );
                        } else {
                          return const Text('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
                        }
                      },
                    ),
                    const SizedBox(height: 16),
                    SizedBox(
                      width: double.infinity,
                      child: OutlinedButton.icon(
                        onPressed: () => setState(() {}),
                        icon: const Icon(Icons.refresh),
                        label: const Text('–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTestButton(String title, Color color, VoidCallback onPressed) {
    return SizedBox(
      width: 120,
      height: 60,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: color.withOpacity(0.1),
          foregroundColor: _getDarkColor(color),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
        child: Text(
          title,
          textAlign: TextAlign.center,
          style: const TextStyle(fontSize: 12),
        ),
      ),
    );
  }

  Color _getDarkColor(Color color) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –±–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
    final hsl = HSLColor.fromColor(color);
    return hsl.withLightness((hsl.lightness - 0.3).clamp(0.0, 1.0)).toColor();
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫

  Future<void> _testAuthenticationError() async {
    final error = AuthenticationErrorV2(
      errorType: AuthenticationErrorType.invalidCredentials,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      username: 'test@example.com',
      attemptNumber: 3,
    );

    await ErrorDisplayV2.show(
      context,
      error,
      config: const ErrorDisplayConfigV2(
        type: ErrorDisplayType.snackbar,
        showSolution: true,
        showRetryButton: true,
      ),
      onRetry: () => _setResult(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –¥–ª—è –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      ),
    );
  }

  Future<void> _testEncryptionError() async {
    final error = EncryptionErrorV2(
      errorType: EncryptionErrorType.decryptionFailed,
      message: '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
      algorithm: 'AES-256-GCM',
      keyId: 'user_key_123',
      technicalDetails:
          'javax.crypto.BadPaddingException: Given final block not properly padded',
    );

    await ErrorDisplayV2.show(
      context,
      error,
      config: ErrorDisplayConfigV2.critical(),
      onRetry: () => _setResult('–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è'),
      onReport: () => _setResult('–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
    );
  }

  Future<void> _testNetworkError() async {
    final error = NetworkErrorV2(
      errorType: NetworkErrorType.noConnection,
      message: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
      url: 'https://api.codexa-pass.com/sync',
      method: 'POST',
    );

    await ErrorDisplayV2.show(
      context,
      error,
      config: const ErrorDisplayConfigV2(
        type: ErrorDisplayType.banner,
        duration: Duration(seconds: 8),
        showSolution: true,
        showRetryButton: true,
      ),
      onRetry: () => _setResult('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'),
    );
  }

  Future<void> _testValidationError() async {
    final error = ValidationErrorV2(
      errorType: ValidationErrorType.weakPassword,
      message: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π',
      field: 'password',
      value: '123456',
      constraints: {
        'minLength': 8,
        'requireUppercase': true,
        'requireDigits': true,
        'requireSpecialChars': true,
      },
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–µ
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ü—Ä–∏–º–µ—Ä –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ –æ—à–∏–±–∫–∏'),
        content: InlineErrorWidgetV2(
          error: error,
          config: const ErrorDisplayConfigV2(
            showSolution: true,
            isDismissible: true,
          ),
          onDismiss: () {
            Navigator.of(context).pop();
            _setResult('–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∞');
          },
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
        ],
      ),
    );
  }

  Future<void> _testDatabaseError() async {
    final error = DatabaseErrorV2(
      errorType: DatabaseErrorType.corruptedDatabase,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞',
      tableName: 'passwords',
      technicalDetails: 'SQLite error: database disk image is malformed',
    );

    await ErrorDisplayV2.show(
      context,
      error,
      config: const ErrorDisplayConfigV2(
        type: ErrorDisplayType.fullscreen,
        showTechnicalDetails: true,
        showSolution: true,
        showRetryButton: true,
        showReportButton: true,
      ),
      onRetry: () => _setResult('–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'),
      onReport: () =>
          _setResult('–û—Ç—á–µ—Ç –æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏ –ë–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏'),
    );
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Result<T> –æ–ø–µ—Ä–∞—Ü–∏–π

  Future<void> _testSuccessfulOperation() async {
    setState(() => _isLoading = true);

    try {
      final result = await _performSuccessfulOperation();

      result.fold(
        (data) => _setResult('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: $data'),
        (error) =>
            _setResult('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.localizedMessage}'),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _testFailedOperation() async {
    setState(() => _isLoading = true);

    try {
      final result = await _performFailedOperation();

      result.fold(
        (data) => _setResult('‚úÖ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö: $data'),
        (error) => _setResult('‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${error.localizedMessage}'),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _testRetryOperation() async {
    setState(() => _isLoading = true);

    try {
      final handler = getGlobalErrorHandler();

      final result = await handler.executeWithRetry(
        () async {
          return await _performUnreliableOperation();
        },
        maxRetries: 3,
        useExponentialBackoff: true,
      );

      result.fold(
        (data) => _setResult('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å retry —É—Å–ø–µ—à–Ω–∞: $data'),
        (error) => _setResult(
          '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: ${error.localizedMessage}',
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  Future<ResultV2<String>> _performSuccessfulOperation() async {
    await Future.delayed(const Duration(seconds: 1));
    return SuccessV2('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã');
  }

  Future<ResultV2<String>> _performFailedOperation() async {
    await Future.delayed(const Duration(seconds: 1));

    final error = NetworkErrorV2(
      errorType: NetworkErrorType.serverError,
      message: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      statusCode: 503,
      url: '/api/test',
    );

    return FailureV2(error);
  }

  Future<String> _performUnreliableOperation() async {
    await Future.delayed(const Duration(milliseconds: 500));

    // 70% —à–∞–Ω—Å –Ω–µ—É–¥–∞—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ retry –ª–æ–≥–∏–∫–∏
    if (DateTime.now().millisecond % 10 < 7) {
      throw NetworkErrorV2(
        errorType: NetworkErrorType.timeout,
        message: '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
        url: '/api/unreliable',
      );
    }

    return '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫';
  }

  Future<Map<String, Object>> _getErrorHandlerStats() async {
    try {
      final handler = getGlobalErrorHandler();
      return handler.getErrorStats();
    } catch (e) {
      return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'};
    }
  }

  void _setResult(String message) {
    setState(() {
      _lastResultMessage =
          '[${DateTime.now().toString().substring(11, 19)}] $message';
    });

    AppLogger.instance.info('ErrorV2 Test: $message');
  }
}
