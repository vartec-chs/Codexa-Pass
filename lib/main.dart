import 'dart:async';
import 'dart:io';
import 'package:codexa_pass/core/logging/app_logger.dart';
import 'package:codexa_pass/core/logging/logging.dart';

import 'package:codexa_pass/generated/l10n.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:flutter_localizations/flutter_localizations.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await _initializeLogging();
  runApp(ProviderScope(observers: [LogInterceptor()], child: MyApp()));
}

Future<void> _initializeLogging() async {
  WidgetsFlutterBinding.ensureInitialized();

  FlutterError.onError = (details) {
    AppLogger.instance.fatal('Flutter Error', details.exception, details.stack);
  };

  PlatformDispatcher.instance.onError = (error, stack) {
    AppLogger.instance.fatal('Dart Error', error, stack);
    return true;
  };

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –∏ –∂–¥–µ–º –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  final logger = AppLogger.instance;

  // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
  await logger.waitForInitialization();

  // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
  LogUtils.logAppInfo();
  AppLogger.instance.info('–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
  _testLogFileCreation();
}

void _testLogFileCreation() async {
  final logger = AppLogger.instance;

  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  await Future.delayed(Duration(seconds: 2));

  if (kDebugMode) {
    print('=== TEST LOG FILE CREATION ===');
    print('File logging ready: ${logger.isFileLoggingReady}');

    final logDir = await logger.getLogDirectory();
    print('Log directory: $logDir');

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.debug('üîç –¢–µ—Å—Ç–æ–≤–æ–µ debug —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.info('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ info —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.warning('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ warning —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.error('‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ error —Å–æ–æ–±—â–µ–Ω–∏–µ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    Timer(Duration(seconds: 3), () async {
      final logFiles = await logger.getLogFiles();
      print('Found ${logFiles.length} log files:');
      for (final file in logFiles) {
        if (await file.exists()) {
          final size = await file.length();
          print('  ${file.path} (${size} bytes)');
        }
      }
    });
  }
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
      localizationsDelegates: const [
        S.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: S.delegate.supportedLocales,

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      navigatorObservers: [LogNavigatorObserver()],

      home: Builder(
        builder: (context) {
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏
          LoggerInitializer.initializeWithContext(context);
          return const MyHomePage(title: 'Flutter Demo Home Page');
        },
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    LoggerInitializer.initialize();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è context
    LoggerInitializer.initializeWithContext(context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            FutureBuilder<String?>(
              future: AppLogger.instance.getLogDirectory(),
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Text('–õ–æ–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${snapshot.data}');
                } else {
                  return Text('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤...');
                }
              },
            ),
            SizedBox(height: 16),
            Text('–õ–æ–≥–≥–µ—Ä –≥–æ—Ç–æ–≤: ${AppLogger.instance.isFileLoggingReady}'),
            SizedBox(height: 16),
            FutureBuilder<List<File>>(
              future: AppLogger.instance.getLogFiles(),
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Text('–§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: ${snapshot.data!.length}');
                } else {
                  return Text('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤...');
                }
              },
            ),
            SizedBox(height: 32),
            ElevatedButton(
              onPressed: () {
                _testLogging();
              },
              child: const Text('–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () async {
                // –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º LogUtils.logAppInfo
                AppLogger.instance.info(
                  '=== –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç LogUtils.logAppInfo ===',
                );
                LogUtils.logAppInfo();
                AppLogger.instance.info('=== –ö–æ–Ω–µ—Ü –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ===');

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('LogUtils.logAppInfo –≤—ã–ø–æ–ª–Ω–µ–Ω!')),
                );
              },
              child: const Text('–¢–µ—Å—Ç LogUtils.logAppInfo'),
            ),
          ],
        ),
      ),
    );
  }

  void _testLogging() {
    // –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    AppLogger.instance.debug('–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Debug message');
    AppLogger.instance.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Info message');
    AppLogger.instance.warning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ / Warning message');
    AppLogger.instance.error('–û—à–∏–±–∫–∞ / Error message');

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    _testSystemMessages();
  }

  void _testSystemMessages() async {
    try {
      // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      await AppLogger.instance.getLogFiles();
      await AppLogger.instance.clearAllLogs();
    } catch (e) {
      AppLogger.instance.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
        e,
      );
    }
  }
}
