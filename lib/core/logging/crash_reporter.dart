import 'dart:io';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;
import 'package:codexa_pass/core/config/constants.dart';
import 'system_info.dart';
import 'app_logger.dart';

/// –¢–∏–ø—ã –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤
enum CrashType {
  flutter('flutter_error'),
  dart('dart_error'),
  native('native_error'),
  custom('custom_error'),
  fatal('fatal_error');

  const CrashType(this.folderName);
  final String folderName;
}

/// –ú–æ–¥–µ–ª—å –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞
class CrashReport {
  final String id;
  final DateTime timestamp;
  final CrashType type;
  final String title;
  final String message;
  final String? stackTrace;
  final Map<String, dynamic> systemInfo;
  final Map<String, dynamic>? additionalData;

  CrashReport({
    required this.id,
    required this.timestamp,
    required this.type,
    required this.title,
    required this.message,
    this.stackTrace,
    required this.systemInfo,
    this.additionalData,
  });

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  factory CrashReport.fromException({
    required CrashType type,
    required String title,
    required dynamic exception,
    StackTrace? stackTrace,
    Map<String, dynamic>? additionalData,
  }) {
    final timestamp = DateTime.now();
    final id = _generateId(timestamp, type);

    return CrashReport(
      id: id,
      timestamp: timestamp,
      type: type,
      title: title,
      message: exception.toString(),
      stackTrace: stackTrace?.toString(),
      systemInfo: SystemInfo.instance.getPlatformInfo(),
      additionalData: additionalData,
    );
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞
  static String _generateId(DateTime timestamp, CrashType type) {
    final dateStr = timestamp
        .toIso8601String()
        .replaceAll(':', '-')
        .replaceAll('.', '-');
    return '${type.folderName}_$dateStr';
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'timestamp': timestamp.toIso8601String(),
      'type': type.folderName,
      'title': title,
      'message': message,
      'stackTrace': stackTrace,
      'systemInfo': systemInfo,
      'additionalData': additionalData,
      'reportVersion': '1.0',
    };
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ JSON
  factory CrashReport.fromJson(Map<String, dynamic> json) {
    return CrashReport(
      id: json['id'],
      timestamp: DateTime.parse(json['timestamp']),
      type: CrashType.values.firstWhere(
        (t) => t.folderName == json['type'],
        orElse: () => CrashType.custom,
      ),
      title: json['title'],
      message: json['message'],
      stackTrace: json['stackTrace'],
      systemInfo: Map<String, dynamic>.from(json['systemInfo'] ?? {}),
      additionalData: json['additionalData'] != null
          ? Map<String, dynamic>.from(json['additionalData'])
          : null,
    );
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
  String toReadableText() {
    final buffer = StringBuffer();

    buffer.writeln('=' * 80);
    buffer.writeln('–ö–†–ê–®-–†–ï–ü–û–†–¢: $title');
    buffer.writeln('=' * 80);
    buffer.writeln('ID: $id');
    buffer.writeln('–í—Ä–µ–º—è: ${timestamp.toLocal()}');
    buffer.writeln('–¢–∏–ø: ${type.folderName}');
    buffer.writeln('');

    buffer.writeln('–û–ü–ò–°–ê–ù–ò–ï –û–®–ò–ë–ö–ò:');
    buffer.writeln(message);
    buffer.writeln('');

    if (stackTrace != null) {
      buffer.writeln('–°–¢–ï–ö –í–´–ó–û–í–û–í:');
      buffer.writeln(stackTrace);
      buffer.writeln('');
    }

    buffer.writeln('–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
    systemInfo.forEach((key, value) {
      buffer.writeln('  $key: $value');
    });
    buffer.writeln('');

    if (additionalData != null && additionalData!.isNotEmpty) {
      buffer.writeln('–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:');
      additionalData!.forEach((key, value) {
        buffer.writeln('  $key: $value');
      });
      buffer.writeln('');
    }

    buffer.writeln('=' * 80);
    return buffer.toString();
  }
}

/// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞–º–∏
class CrashReporter {
  static CrashReporter? _instance;
  static const String _crashReportsFolder = 'crash_reports';
  static const int _maxCrashReports = 50;

  bool _isInitialized = false;
  String? _crashReportsPath;

  CrashReporter._internal();

  static CrashReporter get instance {
    _instance ??= CrashReporter._internal();
    return _instance!;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
  Future<void> initialize() async {
    try {
      await _initializeCrashReportsDirectory();
      _isInitialized = true;

      if (kDebugMode) {
        print('CrashReporter: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—É—Ç—å: $_crashReportsPath');
      }
    } catch (e) {
      if (kDebugMode) {
        print('CrashReporter: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      }
      _isInitialized = false;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤
  Future<void> _initializeCrashReportsDirectory() async {
    Directory? appDocDir;

    try {
      appDocDir = await getApplicationDocumentsDirectory();
    } catch (e) {
      // Fallback: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      final String fallbackPath =
          Platform.environment['USERPROFILE'] ??
          Platform.environment['HOME'] ??
          Directory.current.path;
      appDocDir = Directory(fallbackPath);
    }

    final crashReportsDir = Directory(
      path.join(appDocDir.path, AppConstants.logPath, _crashReportsFolder),
    );

    if (!await crashReportsDir.exists()) {
      await crashReportsDir.create(recursive: true);
    }

    _crashReportsPath = crashReportsDir.path;

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    for (final crashType in CrashType.values) {
      final typeDir = Directory(
        path.join(_crashReportsPath!, crashType.folderName),
      );
      if (!await typeDir.exists()) {
        await typeDir.create(recursive: true);
      }
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞
  Future<String?> saveCrashReport(CrashReport report) async {
    if (!_isInitialized) {
      await initialize();
    }

    if (!_isInitialized || _crashReportsPath == null) {
      if (kDebugMode) {
        print(
          'CrashReporter: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç - –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
        );
      }
      return null;
    }

    try {
      final typeDir = Directory(
        path.join(_crashReportsPath!, report.type.folderName),
      );
      final fileName = '${report.id}.json';
      final filePath = path.join(typeDir.path, fileName);
      final file = File(filePath);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
      await file.writeAsString(
        const JsonEncoder.withIndent('  ').convert(report.toJson()),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Ç–∞–µ–º—É—é –≤–µ—Ä—Å–∏—é
      final readableFileName = '${report.id}.txt';
      final readableFilePath = path.join(typeDir.path, readableFileName);
      final readableFile = File(readableFilePath);
      await readableFile.writeAsString(report.toReadableText());

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–ø–æ—Ä—Ç—ã
      await _cleanOldCrashReports(report.type);

      if (kDebugMode) {
        print('CrashReporter: –ö—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $filePath');
      }

      return filePath;
    } catch (e) {
      if (kDebugMode) {
        print('CrashReporter: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞: $e');
      }
      return null;
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤
  Future<void> _cleanOldCrashReports(CrashType type) async {
    try {
      final typeDir = Directory(path.join(_crashReportsPath!, type.folderName));
      final files = typeDir
          .listSync()
          .whereType<File>()
          .where((file) => file.path.endsWith('.json'))
          .toList();

      if (files.length > _maxCrashReports) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        files.sort(
          (a, b) => a.statSync().modified.compareTo(b.statSync().modified),
        );

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        for (int i = 0; i < files.length - _maxCrashReports; i++) {
          final jsonFile = files[i];
          final txtFile = File(jsonFile.path.replaceAll('.json', '.txt'));

          await jsonFile.delete();
          if (await txtFile.exists()) {
            await txtFile.delete();
          }
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('CrashReporter: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤: $e');
      }
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  Future<String?> reportCrash({
    required CrashType type,
    required String title,
    required dynamic exception,
    StackTrace? stackTrace,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SystemInfo –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (SystemInfo.instance.appName == 'Unknown') {
        await SystemInfo.instance.initialize();
      }

      final report = CrashReport.fromException(
        type: type,
        title: title,
        exception: exception,
        stackTrace: stackTrace,
        additionalData: additionalData,
      );

      final filePath = await saveCrashReport(report);

      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
      AppLogger.instance.fatal(
        'üí• –ö–†–ê–®-–†–ï–ü–û–†–¢ –°–û–ó–î–ê–ù: ${report.title}',
        exception,
        stackTrace,
      );

      return filePath;
    } catch (e) {
      if (kDebugMode) {
        print('CrashReporter: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞: $e');
      }
      return null;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤
  Future<List<CrashReport>> getAllCrashReports() async {
    if (!_isInitialized || _crashReportsPath == null) {
      return [];
    }

    final reports = <CrashReport>[];

    try {
      for (final crashType in CrashType.values) {
        final typeDir = Directory(
          path.join(_crashReportsPath!, crashType.folderName),
        );
        if (await typeDir.exists()) {
          final files = typeDir.listSync().whereType<File>().where(
            (file) => file.path.endsWith('.json'),
          );

          for (final file in files) {
            try {
              final content = await file.readAsString();
              final json = jsonDecode(content) as Map<String, dynamic>;
              final report = CrashReport.fromJson(json);
              reports.add(report);
            } catch (e) {
              if (kDebugMode) {
                print(
                  'CrashReporter: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞ ${file.path}: $e',
                );
              }
            }
          }
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      reports.sort((a, b) => b.timestamp.compareTo(a.timestamp));
    } catch (e) {
      if (kDebugMode) {
        print('CrashReporter: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤: $e');
      }
    }

    return reports;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  Future<List<CrashReport>> getCrashReportsByType(CrashType type) async {
    final allReports = await getAllCrashReports();
    return allReports.where((report) => report.type == type).toList();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
  Future<Map<CrashType, int>> getCrashReportsCount() async {
    final counts = <CrashType, int>{};

    if (!_isInitialized || _crashReportsPath == null) {
      return counts;
    }

    for (final crashType in CrashType.values) {
      final typeDir = Directory(
        path.join(_crashReportsPath!, crashType.folderName),
      );
      if (await typeDir.exists()) {
        final files = typeDir
            .listSync()
            .whereType<File>()
            .where((file) => file.path.endsWith('.json'))
            .length;
        counts[crashType] = files;
      } else {
        counts[crashType] = 0;
      }
    }

    return counts;
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤
  Future<void> clearAllCrashReports() async {
    if (!_isInitialized || _crashReportsPath == null) {
      return;
    }

    try {
      for (final crashType in CrashType.values) {
        final typeDir = Directory(
          path.join(_crashReportsPath!, crashType.folderName),
        );
        if (await typeDir.exists()) {
          final files = typeDir.listSync().whereType<File>();
          for (final file in files) {
            await file.delete();
          }
        }
      }

      AppLogger.instance.info('üóëÔ∏è –í—Å–µ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã');
    } catch (e) {
      if (kDebugMode) {
        print('CrashReporter: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤: $e');
      }
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  Future<void> clearCrashReportsByType(CrashType type) async {
    if (!_isInitialized || _crashReportsPath == null) {
      return;
    }

    try {
      final typeDir = Directory(path.join(_crashReportsPath!, type.folderName));
      if (await typeDir.exists()) {
        final files = typeDir.listSync().whereType<File>();
        for (final file in files) {
          await file.delete();
        }
      }

      AppLogger.instance.info(
        'üóëÔ∏è –ö—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç—ã —Ç–∏–ø–∞ ${type.folderName} —É–¥–∞–ª–µ–Ω—ã',
      );
    } catch (e) {
      if (kDebugMode) {
        print(
          'CrashReporter: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–∞ ${type.folderName}: $e',
        );
      }
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–æ–≤
  String? get crashReportsPath => _crashReportsPath;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;
}
