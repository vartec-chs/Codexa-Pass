import 'dart:io';
import 'package:flutter/foundation.dart';
import 'app_logger.dart';

/// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏
class LogUtils {
  static final AppLogger _logger = AppLogger.instance;

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  static void logAppInfo() {
    _logger.info('=== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===');
    _logger.info('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${Platform.operatingSystem}');
    _logger.info('–í–µ—Ä—Å–∏—è: ${Platform.operatingSystemVersion}');
    _logger.info('Debug —Ä–µ–∂–∏–º: $kDebugMode');
    _logger.info('Release —Ä–µ–∂–∏–º: $kReleaseMode');
    _logger.info('Profile —Ä–µ–∂–∏–º: $kProfileMode');
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static void logPerformance(String operation, Duration duration) {
    _logger.info(
      '‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: $operation - ${duration.inMilliseconds}ms',
    );
  }

  /// –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
  static Future<T> measurePerformance<T>(
    String operationName,
    Future<T> Function() operation,
  ) async {
    final stopwatch = Stopwatch()..start();
    try {
      final result = await operation();
      stopwatch.stop();
      logPerformance(operationName, stopwatch.elapsed);
      return result;
    } catch (e, stackTrace) {
      stopwatch.stop();
      _logger.error(
        '–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ "$operationName" (${stopwatch.elapsed.inMilliseconds}ms)',
        e,
        stackTrace,
      );
      rethrow;
    }
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  static void logNavigation(String from, String to) {
    _logger.info('üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: $from ‚Üí $to');
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  static void logUserAction(String action, {Map<String, dynamic>? details}) {
    final String message = details != null
        ? 'üë§ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $action - $details'
        : 'üë§ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $action';
    _logger.info(message);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–∏–¥–∂–µ—Ç–æ–≤
  static void logWidgetLifecycle(String widgetName, String event) {
    _logger.debug('üì± –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª: $widgetName - $event');
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  static void logConnectivityStatus(bool isConnected) {
    final String status = isConnected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ';
    _logger.info('üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: $status');
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  static void logDatabaseOperation(
    String operation, {
    String? table,
    dynamic data,
  }) {
    final String message = table != null
        ? 'üóÑÔ∏è –ë–î –æ–ø–µ—Ä–∞—Ü–∏—è: $operation –≤ —Ç–∞–±–ª–∏—Ü–µ $table'
        : 'üóÑÔ∏è –ë–î –æ–ø–µ—Ä–∞—Ü–∏—è: $operation';
    _logger.debug(message, data);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
  static void logFileOperation(String operation, String filePath) {
    _logger.debug('üìÅ –§–∞–π–ª–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: $operation - $filePath');
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  static void logCriticalError(
    String context,
    dynamic error,
    StackTrace stackTrace, {
    Map<String, dynamic>? additionalInfo,
  }) {
    final String message = additionalInfo != null
        ? 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ $context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: $additionalInfo'
        : 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ $context';
    _logger.fatal(message, error, stackTrace);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
  static void logMemoryInfo() {
    if (kDebugMode) {
      // –í release —Ä–µ–∂–∏–º–µ ProcessInfo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      _logger.debug(
        'üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏',
      );
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
  static String formatFileSize(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
  static String getErrorSummary(dynamic error) {
    if (error == null) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

    final String errorString = error.toString();
    if (errorString.length > 200) {
      return '${errorString.substring(0, 200)}...';
    }
    return errorString;
  }
}
