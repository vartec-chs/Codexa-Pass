import 'dart:io';

// –°–∏–º—É–ª—è—Ü–∏—è AppConstants –¥–ª—è —Ç–µ—Å—Ç–∞
class AppConstants {
  static const String logPath = 'Codexa/logs';
  static const int maxLogFileSizeMB = 10;
  static const int maxLogFiles = 5;
}

void main() async {
  print('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –õ–û–ì –§–ê–ô–õ–û–í ===\n');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  print('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');

  String? documentsPath;
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    final String? userProfile = Platform.environment['USERPROFILE'];
    final String? home = Platform.environment['HOME'];

    if (userProfile != null) {
      documentsPath = '$userProfile\\Documents';
      print('   –ù–∞–π–¥–µ–Ω USERPROFILE: $userProfile');
    } else if (home != null) {
      documentsPath = '$home/Documents';
      print('   –ù–∞–π–¥–µ–Ω HOME: $home');
    } else {
      documentsPath = Directory.current.path;
      print('   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $documentsPath');
    }

    print('   –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: $documentsPath');

    final Directory docDir = Directory(documentsPath);
    final bool docExists = await docDir.exists();
    print('   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $docExists');
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: $e');
    return;
  }

  // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
  print('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤...');

  final String logDirPath = '$documentsPath/${AppConstants.logPath}';
  print('   –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤: $logDirPath');

  try {
    final Directory logDir = Directory(logDirPath);

    if (!await logDir.exists()) {
      print('   –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤...');
      await logDir.create(recursive: true);
    }

    final bool logDirExists = await logDir.exists();
    print('   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $logDirExists');

    if (logDirExists) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      try {
        final testFile = File('$logDirPath/test_access.tmp');
        await testFile.writeAsString('test');
        await testFile.delete();
        print('   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: OK');
      } catch (e) {
        print('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: $e');
      }
    }
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤: $e');
    return;
  }

  // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
  print('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞...');

  try {
    final String fileName =
        'app_${DateTime.now().toString().split(' ')[0]}.log';
    final String logFilePath = '$logDirPath/$fileName';
    final File logFile = File(logFilePath);

    print('   –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞: $logFilePath');

    if (!await logFile.exists()) {
      print('   –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞...');
      await logFile.create();
    }

    final bool fileExists = await logFile.exists();
    print('   –§–∞–π–ª –ª–æ–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $fileExists');

    if (fileExists) {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
      final String testMessage =
          '[${DateTime.now().toIso8601String()}] –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
      await logFile.writeAsString(testMessage, mode: FileMode.append);

      final int fileSize = await logFile.length();
      print('   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏: $fileSize –±–∞–π—Ç');

      final String content = await logFile.readAsString();
      print('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:');
      print(
        '   ${content.length > 100 ? content.substring(content.length - 100) : content}',
      );

      print('   ‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –ª–æ–≥–∞: OK');
    }
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º –ª–æ–≥–∞: $e');
    return;
  }

  // –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  print('\n4. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤:');
  try {
    final Directory logDir = Directory(logDirPath);
    final List<FileSystemEntity> entities = await logDir.list().toList();

    if (entities.isEmpty) {
      print('   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞');
    } else {
      for (final entity in entities) {
        if (entity is File) {
          final stat = await entity.stat();
          print(
            '   üìÑ ${entity.path} (${stat.size} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω: ${stat.modified})',
          );
        } else {
          print('   üìÅ ${entity.path}');
        }
      }
    }
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $e');
  }

  print('\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
}
