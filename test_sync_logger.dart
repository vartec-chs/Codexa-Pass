import 'package:flutter/widgets.dart';
import 'lib/core/logging/app_logger.dart';
import 'lib/core/logging/log_utils.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  print('=== –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –õ–û–ì–ì–ï–†–ê ===\n');

  // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
  print('1. –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ª–æ–≥–≥–µ—Ä–∞...');
  final logger = AppLogger.instance;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  print(
    '   –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–∂–∏–¥–∞–Ω–∏—è: isFileLoggingReady = ${logger.isFileLoggingReady}',
  );

  // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  print('\n2. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
  await logger.waitForInitialization();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  print(
    '   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: isFileLoggingReady = ${logger.isFileLoggingReady}',
  );

  // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  print('\n3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...');
  LogUtils.logAppInfo();

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  logger.info('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
  logger.debug('Debug —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
  print('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  final logDir = await logger.getLogDirectory();
  print('   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: $logDir');

  final logFiles = await logger.getLogFiles();
  print('   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${logFiles.length}');

  for (final file in logFiles) {
    if (await file.exists()) {
      final size = await file.length();
      print('   üìÑ ${file.path} (${size} –±–∞–π—Ç)');

      if (size > 0) {
        final content = await file.readAsString();
        final lines = content
            .split('\n')
            .where((line) => line.isNotEmpty)
            .toList();
        print('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ: ${lines.length}');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        print('   –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:');
        for (int i = 0; i < 5 && i < lines.length; i++) {
          print('     ${lines[i]}');
        }

        if (lines.length > 5) {
          print('     ... (–µ—â—ë ${lines.length - 5} —Å—Ç—Ä–æ–∫)');
        }
      }
    }
  }

  print('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}
