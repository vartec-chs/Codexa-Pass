import 'package:flutter/widgets.dart';
import 'package:codexa_pass/app/logging/app_logger.dart';

void main() async {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Flutter bindings
  WidgetsFlutterBinding.ensureInitialized();

  print('=== –¢–ï–°–¢ –õ–û–ì–ì–ï–†–ê ===\n');

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
    print('1. –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ª–æ–≥–≥–µ—Ä–∞...');
    final logger = AppLogger.instance;
    print('   –õ–æ–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω');

    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    print('\n2. –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (5 —Å–µ–∫—É–Ω–¥)...');
    await Future.delayed(Duration(seconds: 5));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    print('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–≥–≥–µ—Ä–∞...');
    print('   File logging ready: ${logger.isFileLoggingReady}');

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ª–æ–≥–∞–º
    final logDir = await logger.getLogDirectory();
    print('   Log directory: $logDir');

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print('\n4. –ó–∞–ø–∏—Å—å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
    logger.debug('üîç –¢–µ—Å—Ç–æ–≤–æ–µ debug —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.info('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ info —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.warning('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ warning —Å–æ–æ–±—â–µ–Ω–∏–µ');
    logger.error('‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ error —Å–æ–æ–±—â–µ–Ω–∏–µ');
    print('   –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–æ–≥–≥–µ—Ä');

    // –ñ–¥–µ–º –∑–∞–ø–∏—Å–∏
    print('\n5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (3 —Å–µ–∫—É–Ω–¥—ã)...');
    await Future.delayed(Duration(seconds: 3));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    print('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    final logFiles = await logger.getLogFiles();
    print('   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${logFiles.length}');

    for (final file in logFiles) {
      if (await file.exists()) {
        final size = await file.length();
        print('   üìÑ ${file.path} ($size –±–∞–π—Ç)');

        if (size > 0) {
          final content = await file.readAsString();
          print('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:');
          print(
            '   ${content.length > 200 ? content.substring(content.length - 200) : content}',
          );
        }
      }
    }

    print('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (e, stackTrace) {
    print('‚ùå –û—à–∏–±–∫–∞: $e');
    print('Stack trace: $stackTrace');
  }
}
