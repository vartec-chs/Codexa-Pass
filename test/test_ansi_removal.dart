import 'dart:io';

void main() async {
  print('=== –¢–ï–°–¢ –£–î–ê–õ–ï–ù–ò–Ø ANSI –ö–û–î–û–í ===\n');

  // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ ANSI escape-–∫–æ–¥–∞–º–∏
  final String testWithAnsi =
      '\x1B[38;5;12m‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\x1B[0m\n'
      '\x1B[38;5;12m‚îÇ #0   AppLogPrinter.log\x1B[0m\n'
      '\x1B[38;5;12m‚îú‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ\x1B[0m\n'
      '\x1B[38;5;12m‚îÇ üí° === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===\x1B[0m\n'
      '\x1B[38;5;12m‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\x1B[0m';

  print('–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å ANSI –∫–æ–¥–∞–º–∏:');
  print(testWithAnsi);
  print('\n–î–ª–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: ${testWithAnsi.length} —Å–∏–º–≤–æ–ª–æ–≤');

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è ANSI –∫–æ–¥–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
  String removeAnsiEscapeCodes(String text) {
    // –ë–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö ANSI escape-–∫–æ–¥–æ–≤
    final ansiRegex = RegExp(r'\x1B\[[0-9;]*[a-zA-Z]');
    return text.replaceAll(ansiRegex, '');
  }

  // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
  final String cleanString = removeAnsiEscapeCodes(testWithAnsi);

  print('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
  print('–û—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:');
  print(cleanString);
  print('\n–î–ª–∏–Ω–∞ –æ—á–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: ${cleanString.length} —Å–∏–º–≤–æ–ª–æ–≤');
  print('–£–¥–∞–ª–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${testWithAnsi.length - cleanString.length}');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ANSI –∫–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∏—Å—å
  final bool hasAnsiCodes = cleanString.contains(
    RegExp(r'\x1B\[[0-9;]*[a-zA-Z]'),
  );
  print('–û—Å—Ç–∞–ª–∏—Å—å ANSI –∫–æ–¥—ã: $hasAnsiCodes');

  if (!hasAnsiCodes) {
    print('\n‚úÖ ANSI –∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
  } else {
    print('\n‚ùå ANSI –∫–æ–¥—ã –Ω–µ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã!');
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
  print('\n=== –¢–ï–°–¢ –ó–ê–ü–ò–°–ò –í –§–ê–ô–õ ===');

  try {
    final File testFile = File('test_clean_log.txt');
    final String timestamp = DateTime.now().toIso8601String();
    final String logEntry = '[$timestamp] $cleanString\n';

    await testFile.writeAsString(logEntry);

    print('–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${testFile.path}');
    print('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${await testFile.length()} –±–∞–π—Ç');

    // –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    final String fileContent = await testFile.readAsString();
    print('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:');
    print(fileContent);

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    await testFile.delete();
    print('\n–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω.');
  } catch (e) {
    print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º: $e');
  }
}
